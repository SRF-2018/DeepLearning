#include <stdio.h>
#include <set>
#include <random>
#include <iostream>
#include <vector>
#include <fstream>
using namespace std;
ofstream label("/Users/gangseong-yong/Desktop/KangSungYong/train2/test_label.in");
ofstream image("/Users/gangseong-yong/Desktop/KangSungYong/train2/test_image.in");
const int alpha[10][8][8] = {
    {
        { 8,8,8,8,0,0,0,0 },
        { 0,0,0,8,0,0,0,0 },
        { 0,0,0,8,0,0,0,0 },
        { 0,0,0,8,0,0,0,0 },
        { 0,0,0,8,0,0,0,0 },
        { 0,0,0,8,0,0,0,0 },
        { 0,0,0,8,0,0,0,0 },
        { 0,0,0,8,0,0,0,0 }    //0
    },
    {
        { 8,8,8,8,0,0,0,0 },
        { 0,0,0,8,0,0,0,0 },
        { 0,0,0,8,0,0,0,0 },
        { 0,0,0,8,0,0,0,0 },
        { 0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0 }    //1
    },
    {
        { 0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0 },
        { 0,0,0,8,0,0,0,0 },
        { 0,0,0,8,0,0,0,0 },
        { 0,0,0,8,0,0,0,0 },
        { 8,8,8,8,0,0,0,0 }   //2
    },
    {
        { 8,8,8,8,0,0,0,0 },
        { 0,0,0,8,0,0,0,0 },
        { 0,0,0,8,0,0,0,0 },
        { 0,0,0,8,0,0,0,0 },
        { 0,0,0,8,0,0,0,0 },
        { 0,0,0,8,0,0,0,0 },
        { 0,0,0,8,0,0,0,0 },
        { 8,8,8,8,0,0,0,0 }   //3
    },
    {
        { 0,0,0,0,8,8,8,8 },
        { 0,0,0,0,8,0,0,0 },
        { 0,0,0,0,8,0,0,0 },
        { 0,0,0,0,8,0,0,0 },
        { 0,0,0,0,8,0,0,0 },
        { 0,0,0,0,8,0,0,0 },
        { 0,0,0,0,8,0,0,0 },
        { 0,0,0,0,8,0,0,0 }  //4
    },
    {
        { 0,0,0,0,8,8,8,8 },
        { 0,0,0,0,8,0,0,0 },
        { 0,0,0,0,8,0,0,0 },
        { 0,0,0,0,8,0,0,0 },
        { 0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0 }  //5
    },
    {
        { 0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0 },
        { 0,0,0,0,8,0,0,0 },
        { 0,0,0,0,8,0,0,0 },
        { 0,0,0,0,8,0,0,0 },
        { 0,0,0,0,8,8,8,8 } //6
    },
    {
        { 0,0,0,0,8,8,8,8 },
        { 0,0,0,0,8,0,0,0 },
        { 0,0,0,0,8,0,0,0 },
        { 0,0,0,0,8,0,0,0 },
        { 0,0,0,0,8,0,0,0 },
        { 0,0,0,0,8,0,0,0 },
        { 0,0,0,0,8,0,0,0 },
        { 0,0,0,0,8,8,8,8 } //7
    },
    {
        { 0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0 },
        { 0,0,8,8,8,8,0,0 },
        { 0,0,8,0,0,8,0,0 },
        { 0,0,8,0,0,8,0,0 },
        { 0,0,8,0,0,8,0,0 },
        { 0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0 }  //8
    },
    {
        { 0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0 },
        { 0,0,8,0,0,8,0,0 },
        { 0,0,8,0,0,8,0,0 },
        { 0,0,8,0,0,8,0,0 },
        { 0,0,8,8,8,8,0,0 },
        { 0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0 }  //9
    }
};
int ret[10][10];
set<vector<int> > stk;

int getRandomNumber ( int min, int max )
{
    //< 1단계. 시드 설정
    random_device rn;
    mt19937_64 rnd( rn() );
    
    //< 2단계. 분포 설정 ( 정수 )
    uniform_int_distribution<int> range(min, max);
    
    //< 3단계. 값 추출
    return range( rnd );
}
int cnt[1000];
void bitblt(int y, int x, int n) {
    cnt[n]++;
    vector<int> vvc;
    for(int i = 0; i < 8; i++){
        for(int j = 0; j < 8; j++){
            ret[i][j] = alpha[n][i][j];
            if(ret[i][j] > 0) ret[i][j] = 1;
        }
    }
    for (int i = 0; i < 8; i++) {
        for (int j = 0; j < 8; j++) {
            int x = rand();
            if(x % 10 == 0) ret[i][j] ^= 1;
            vvc.push_back(ret[i][j]);
        }
    }
    label << n << endl;
    stk.insert(vvc);
    for(int i = 0; i < 8; i++){
        for(int j = 0; j < 8; j++){
            image << ret[i][j] <<' ';
            //cout<<ret[i][j]<<' ';
        }
        image << endl;
    }
    //image << endl;
}



int main() {
    vector<int> vc = {0,1,2,3,4,5,6,7,8,9};
    int iter = 0;
    int lim = 10000;
    for(int iter = 0; iter < lim; iter++){
        bitblt(0,0,getRandomNumber(0,9));
    }
    for(int i = 0; i < 10; i++){
        cout<<i<<' '<<cnt[i]<<endl;
    }
    cout<<stk.size();
    image.close();
    label.close();
    return 0;
}



